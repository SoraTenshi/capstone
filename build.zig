const std = @import("std");
const builtin = @import("builtin");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    const upstream = b.dependency("capstone", .{});
    const lib = b.addSharedLibrary(.{
        .name = "capstone",
        .target = target,
        .optimize = optimize,
    });

    lib.linkLibC();
    lib.addIncludePath(upstream.path("include"));
    lib.addCSourceFiles(.{
        .root = upstream.path(""),
        .files = &.{
            "Mapping.c",
            "MCInst.c",
            "cs.c",
            "MCInstrDesc.c",
            "utils.c",
            "SStream.c",
            "MCRegisterInfo.c",

            "cstool/cstool_evm.c",
            "cstool/cstool_systemz.c",
            "cstool/getopt.c",
            "cstool/cstool_arm64.c",
            "cstool/cstool_tricore.c",
            "cstool/cstool_powerpc.c",
            "cstool/cstool_mips.c",
            "cstool/cstool_x86.c",
            "cstool/cstool_mos65xx.c",
            "cstool/cstool_bpf.c",
            "cstool/cstool.c",
            "cstool/cstool_riscv.c",
            "cstool/cstool_sparc.c",
            "cstool/cstool_m68k.c",
            "cstool/cstool_xcore.c",
            "cstool/cstool_sh.c",
            "cstool/cstool_tms320c64x.c",
            "cstool/cstool_arm.c",
            "cstool/cstool_wasm.c",
            "cstool/cstool_m680x.c",

            "arch/PowerPC/PPCModule.c",
            "arch/PowerPC/PPCMapping.c",
            "arch/PowerPC/PPCDisassembler.c",
            "arch/PowerPC/PPCInstPrinter.c",
            "arch/X86/X86IntelInstPrinter.c",
            "arch/X86/X86DisassemblerDecoder.c",
            "arch/X86/X86InstPrinterCommon.c",
            "arch/X86/X86Mapping.c",
            "arch/X86/X86Disassembler.c",
            "arch/X86/X86Module.c",
            "arch/X86/X86ATTInstPrinter.c",
            "arch/M680X/M680XInstPrinter.c",
            "arch/M680X/M680XDisassembler.c",
            "arch/M680X/M680XModule.c",
            "arch/TMS320C64x/TMS320C64xModule.c",
            "arch/TMS320C64x/TMS320C64xInstPrinter.c",
            "arch/TMS320C64x/TMS320C64xMapping.c",
            "arch/TMS320C64x/TMS320C64xDisassembler.c",
            "arch/XCore/XCoreDisassembler.c",
            "arch/XCore/XCoreMapping.c",
            "arch/XCore/XCoreInstPrinter.c",
            "arch/XCore/XCoreModule.c",
            "arch/MOS65XX/MOS65XXDisassembler.c",
            "arch/MOS65XX/MOS65XXModule.c",
            "arch/BPF/BPFDisassembler.c",
            "arch/BPF/BPFMapping.c",
            "arch/BPF/BPFInstPrinter.c",
            "arch/BPF/BPFModule.c",
            "arch/Sparc/SparcInstPrinter.c",
            "arch/Sparc/SparcMapping.c",
            "arch/Sparc/SparcDisassembler.c",
            "arch/Sparc/SparcModule.c",
            "arch/WASM/WASMModule.c",
            "arch/WASM/WASMInstPrinter.c",
            "arch/WASM/WASMDisassembler.c",
            "arch/WASM/WASMMapping.c",
            "arch/Mips/MipsInstPrinter.c",
            "arch/Mips/MipsDisassembler.c",
            "arch/Mips/MipsMapping.c",
            "arch/Mips/MipsModule.c",
            "arch/SystemZ/SystemZInstPrinter.c",
            "arch/SystemZ/SystemZDisassembler.c",
            "arch/SystemZ/SystemZMCTargetDesc.c",
            "arch/SystemZ/SystemZModule.c",
            "arch/SystemZ/SystemZMapping.c",
            "arch/RISCV/RISCVMapping.c",
            "arch/RISCV/RISCVDisassembler.c",
            "arch/RISCV/RISCVInstPrinter.c",
            "arch/RISCV/RISCVModule.c",
            "arch/SH/SHInstPrinter.c",
            "arch/SH/SHModule.c",
            "arch/SH/SHDisassembler.c",
            "arch/ARM/ARMInstPrinter.c",
            "arch/ARM/ARMMapping.c",
            "arch/ARM/ARMDisassembler.c",
            "arch/ARM/ARMModule.c",
            "arch/M68K/M68KInstPrinter.c",
            "arch/M68K/M68KModule.c",
            "arch/M68K/M68KDisassembler.c",
            "arch/AArch64/AArch64BaseInfo.c",
            "arch/AArch64/AArch64Module.c",
            "arch/AArch64/AArch64InstPrinter.c",
            "arch/AArch64/AArch64Mapping.c",
            "arch/AArch64/AArch64Disassembler.c",
            "arch/TriCore/TriCoreModule.c",
            "arch/TriCore/TriCoreInstPrinter.c",
            "arch/TriCore/TriCoreMapping.c",
            "arch/TriCore/TriCoreDisassembler.c",
            "arch/EVM/EVMModule.c",
            "arch/EVM/EVMInstPrinter.c",
            "arch/EVM/EVMMapping.c",
            "arch/EVM/EVMDisassembler.c",
        },
        .flags = &.{
            // For now, let's just add all of them lol
            "-DCAPSTONE_HAS_ARM",
            "-DCAPSTONE_HAS_ARM64",
            "-DCAPSTONE_HAS_MIPS",
            "-DCAPSTONE_HAS_POWERPC",
            "-DCAPSTONE_HAS_X86",
            "-DCAPSTONE_HAS_SPARC",
            "-DCAPSTONE_HAS_SYSZ",
            "-DCAPSTONE_HAS_XCORE",
            "-DCAPSTONE_HAS_M68K",
            "-DCAPSTONE_HAS_TMS320C64X",
            "-DCAPSTONE_HAS_M680X",
            "-DCAPSTONE_HAS_EVM",
            "-DCAPSTONE_HAS_WASM",
            "-DCAPSTONE_HAS_MOS65XX",
            "-DCAPSTONE_HAS_BPF",
            "-DCAPSTONE_HAS_RISCV",
            "-DCAPSTONE_HAS_SH",
            "-DCAPSTONE_HAS_TRICORE",
        },
    });

    lib.installHeadersDirectory(upstream.path("include"), "", .{});

    b.installArtifact(lib);
}
